# this is the test script

function mul( x, y) returnable ;

function nof() returnable {
    return 0;
}

function one( a ) returnable {
    return 0;
}

function two( a, b) returnable {
    return 0;
}

function three( a, b, c) returnable {
    return 0;
}

function sub( a, b, c ) returnable {
    return a - b - c;
}


function getTestString() returnable {
    return "testString";
}

function nnn() ;
function nnn( a ) returnable ;

define helloMsg "hello world"
define testNumber 1e-1

function init() {

    msg("*** Test call 1-arg and no-arg functions");
    3+one( nof() );

    msg("*** Test complex expression. b must be: -85");
    var a = 4;
    var b = 10 + a - mul( 8, 6 ) + (3 - 7*8) +2;
    msg( "b = " + b );

    msg("*** Test Script extension. working with vector.");
    var x = -8;
    var v = vec2( x, -10);
    msg ( "v = " + v + " is a " + typeStr( v ) );
    v._x = 16;
    msg( "vector prop. v.x=" + v._x );

    var s = typeStr( v._x );

    msg( "typeof v._x is a " + s );

    v = 4;

    if ( typeof v == float ) {
        msg( "v is a float now" );
    } else {
        msg( "v is not a float. It's a: " + typeStr( typeof v ) );
    }

    msg("*** Test: call number of functions with number of arguments");

    var d = 3+.2;
    msg( "d: " + d);

    one( 3 );

    two( 4+5, one(8) );

    three( one(8), 0, nof() );
    three( nof(), 0, three(1,2, 3) );
    three( 1, 2, 3);

    nof();

    msg( sub( 10, 5, 3) );

    nnn();
    nnn(4);

    msg("*** Test. simple for- loop");

    for ( var i = 0; i < 6; i = i + 1 ) {
        msg( "i=" + i );
    }

    msg("*** Test. simple while- loop");

    v = vec2( 11, 18);


    while ( ( v._x = v._x - 1 ) >= 0 ) {
        msg( "v=" + v );
    }

    msg("*** Test. number of tests");

    reg z = vec2(0, 1);
    var q = vec2( 0.1e-10, 1);

    msg( "z=" + z + " q=" + q );

    if ( z == q ) {
        msg( "z is equal to q");
    } else {
        msg( "z is NOT equal to q");
    }

    msg( "2PI to degree: " + toDeg( 2*PI) );
    msg( "E: " + E );
    msg( "helloMsg define: " + helloMsg );
    msg( "testNumber define + 3: " + ( testNumber + 3 ) );

    var prop = _x;

    v.prop = 17;

    msg ( "prop: " + prop + " v: " + v );

    msg( "get Test String: " + getTestString() + "" );

    if ( typeof v != VECTOR2 ) {
        err(" v is not a vector " ) ;
    } else {
        msg( "v is a vector " );
    }


    msg("*** Test call build-in function: sin and PI define ");
    var ang = PI;
    msg("sin pi: " + sin(ang) );


    msg("*** Test var num control" + scriptGetDumpEnvStr() );

    for ( var i = 0; i < 2; i = i+1 ) {
        var w = "i: " + i;
        msg( " i-level A. dmp: " + scriptGetDumpEnvStr() );
        for ( var j = 0; j < 2; j = j+1 ) {
            var w = "j: " + j;
            msg("   j-level. W: " + w + " dmp: " + scriptGetDumpEnvStr() );
        }
        msg(" i-level B.  W: " + w + " dmp: " + scriptGetDumpEnvStr() );
    }

    msg("*** Test var num control. finished. dmp: " + scriptGetDumpEnvStr() );
    msg("*** values of some variables " );
    msg("ang: " + ang );
    msg("v: " + v );
    msg("z: " + z );
    msg("q: " + q );
    msg("prop: " + prop );


    #msg(" never calling message ");

    msg(" **** integer unary minus: " + - 1 );
    msg(" **** integer unary plus: " + + 1 );
    msg(" **** float unary minus: " + -1. );
    msg(" **** float unary plus: " + + 1. );

    if ( true ) {
        setSlotEnabled( false );
        msg("*** TEST FINISHED");
        return;
    }

    msg( "never calls" );

}

function run() {
}

function mul( x, y) returnable {
    return  x* y;
}

function nnn() {
    msg("nnn: empty version");
}


function nnn( a ) returnable {
    msg("nnn: " + a );
    return 0;
}